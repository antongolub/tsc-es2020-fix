// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`patches contents fixBlankFiles() replaces empty contents with empty export statement 1`] = `
"
export {}
export default undefined
"
`;

exports[`patches contents fixContents() assembles all content modifiers 1`] = `
"import { createRequire } from 'module';
const require = createRequire(import.meta.url);
import { foo } from './foo.js';
import './bar.js';
import * as e1def from 'e1/a/b/c/index.js';
import * as e1root from 'e1';
export { default as json } from './json-data.json' assert { type: 'json' };
const { e1 } = e1def;
const { e1: e1x } = e1root;
export { e1, e1x };
export { m1 } from 'm1';
export { m1 as m1x } from 'm1/index.js';
export { e2 } from 'e2';
export { e2 as es3 } from 'e2/index';
export { e2 as es4 } from 'e2/alias';
export { e2foo } from 'e2/foo';
export { e2bar } from 'e2/bar-bundle';
export * from './foo.js';
export * from './baz/index.js';
export * from './q/u/x/index.js';
export const foobaz = foo + 'baz';
export { foo as foo1 } from './foo.js';
export const foo2 = await import('./foo.js');
export { qux } from './qux.js/index.js';
export const dirname = /file:\\\\/\\\\/(.+)\\\\/[^/]/.exec(import.meta.url)[1];
export const filename = /file:\\\\/\\\\/(.+)/.exec(import.meta.url)[1];
export const rfoo = require('e1/a/b/c/index.js');
export * from './only-types.js';
console.log(foobaz);
//# sourceMappingURL=index.js.map"
`;

exports[`patches contents fixContents() replaces \`.\` with \`./index.cjs\` 1`] = `
"export * from './index.cjs';
export * as reexport from './index.cjs';
//# sourceMappingURL=index-ref.js.map"
`;

exports[`patches contents fixDefaultExport() injects export default 1`] = `
"export {};
export default undefined
"
`;

exports[`patches contents fixDirnameVar() replaces __dirname refs 1`] = `
"import { createRequire } from 'module';
const require = createRequire(import.meta.url);
import { foo } from './foo';
import './bar';
import * as e1def from 'e1/a/b/c';
import * as e1root from 'e1';
export { default as json } from './json-data.json' assert { type: 'json' };
const { e1 } = e1def;
const { e1: e1x } = e1root;
export { e1, e1x };
export { m1 } from 'm1';
export { m1 as m1x } from 'm1/index';
export { e2 } from 'e2';
export { e2 as es3 } from 'e2/index';
export { e2 as es4 } from 'e2/alias';
export { e2foo } from 'e2/foo';
export { e2bar } from 'e2/bar-bundle';
export * from './foo';
export * from './baz';
export * from './q/u/x';
export const foobaz = foo + 'baz';
export { foo as foo1 } from './foo.js';
export const foo2 = await import('./foo');
export { qux } from './qux.js';
export const dirname = /file:\\\\/\\\\/(.+)\\\\/[^/]/.exec(import.meta.url)[1];
export const filename = __filename;
export const rfoo = require('e1/a/b/c');
export * from './only-types';
console.log(foobaz);
//# sourceMappingURL=index.js.map"
`;

exports[`patches contents fixFilenameVar() replaces __filename refs 1`] = `
"import { createRequire } from 'module';
const require = createRequire(import.meta.url);
import { foo } from './foo';
import './bar';
import * as e1def from 'e1/a/b/c';
import * as e1root from 'e1';
export { default as json } from './json-data.json' assert { type: 'json' };
const { e1 } = e1def;
const { e1: e1x } = e1root;
export { e1, e1x };
export { m1 } from 'm1';
export { m1 as m1x } from 'm1/index';
export { e2 } from 'e2';
export { e2 as es3 } from 'e2/index';
export { e2 as es4 } from 'e2/alias';
export { e2foo } from 'e2/foo';
export { e2bar } from 'e2/bar-bundle';
export * from './foo';
export * from './baz';
export * from './q/u/x';
export const foobaz = foo + 'baz';
export { foo as foo1 } from './foo.js';
export const foo2 = await import('./foo');
export { qux } from './qux.js';
export const dirname = __dirname;
export const filename = /file:\\\\/\\\\/(.+)/.exec(import.meta.url)[1];
export const rfoo = require('e1/a/b/c');
export * from './only-types';
console.log(foobaz);
//# sourceMappingURL=index.js.map"
`;

exports[`patches contents fixRelativeModuleReferences() appends file ext to module refs except for the ones that declare "exports" in pkg.json 1`] = `
"import { createRequire } from 'module';
const require = createRequire(import.meta.url);
import { foo } from './foo.js';
import './bar.js';
import * as e1def from 'e1/a/b/c/index.js';
import * as e1root from 'e1';
export { default as json } from './json-data.json' assert { type: 'json' };
const { e1 } = e1def;
const { e1: e1x } = e1root;
export { e1, e1x };
export { m1 } from 'm1';
export { m1 as m1x } from 'm1/index.js';
export { e2 } from 'e2';
export { e2 as es3 } from 'e2/index';
export { e2 as es4 } from 'e2/alias';
export { e2foo } from 'e2/foo';
export { e2bar } from 'e2/bar-bundle';
export * from './foo.js';
export * from './baz/index.js';
export * from './q/u/x/index.js';
export const foobaz = foo + 'baz';
export { foo as foo1 } from './foo.js';
export const foo2 = await import('./foo.js');
export { qux } from './qux.js/index.js';
export const dirname = __dirname;
export const filename = __filename;
export const rfoo = require('e1/a/b/c/index.js');
export * from './only-types.js';
console.log(foobaz);
//# sourceMappingURL=index.js.map"
`;

exports[`patches fix() patches target (tsc-compiled) files as required by opts 1`] = `
"import './bar';
export { default as json } from './json-data.json';
declare const e1: string;
declare const e1x: string;
export { e1, e1x };
export { m1 } from 'm1';
export { m1 as m1x } from 'm1/index.js';
export { e2 } from 'e2';
export { e2 as es3 } from 'e2/index';
export { e2 as es4 } from 'e2/alias';
export { e2foo } from 'e2/foo';
export { e2bar } from 'e2/bar-bundle';
export * from './foo.js';
export * from './baz/index.js';
export * from './q/u/x/index.js';
export declare const foobaz: string;
export { foo as foo1 } from './foo.js';
export declare const foo2: typeof import(\\"./foo.js\\");
export { qux } from './qux.js/index.js';
export declare const dirname: string;
export declare const filename: string;
export declare const rfoo: any;
export * from './only-types.js';
"
`;

exports[`patches fix() patches target (tsc-compiled) files as required by opts 2`] = `
"export {};
//# sourceMappingURL=only-types.mjs.map"
`;

exports[`patches fix() patches target (tsc-compiled) files as required by opts 3`] = `
"import { createRequire } from 'module';
const require = createRequire(import.meta.url);
import { foo } from './foo.mjs';
import './bar.mjs';
import * as e1def from 'e1/a/b/c/index.js';
import * as e1root from 'e1';
export { default as json } from './json-data.json' assert { type: 'json' };
const { e1 } = e1def;
const { e1: e1x } = e1root;
export { e1, e1x };
export { m1 } from 'm1';
export { m1 as m1x } from 'm1/index.js';
export { e2 } from 'e2';
export { e2 as es3 } from 'e2/index';
export { e2 as es4 } from 'e2/alias';
export { e2foo } from 'e2/foo';
export { e2bar } from 'e2/bar-bundle';
export * from './foo.mjs';
export * from './baz/index.mjs';
export * from './q/u/x/index.mjs';
export const foobaz = foo + 'baz';
export { foo as foo1 } from './foo.mjs';
export const foo2 = await import('./foo.mjs');
export { qux } from './qux.js/index.mjs';
export const dirname = /file:\\\\/\\\\/(.+)\\\\/[^/]/.exec(import.meta.url)[1];
export const filename = /file:\\\\/\\\\/(.+)/.exec(import.meta.url)[1];
export const rfoo = require('e1/a/b/c/index.js');
export * from './only-types.mjs';
console.log(foobaz);
//# sourceMappingURL=index.mjs.map"
`;

exports[`patches fix() patches ts sources as required by opts 1`] = `
"import { createRequire } from 'module'
const require = createRequire(import.meta.url)

import { foo } from './foo.js'

import './bar.js'

import * as e1def from 'e1/a/b/c/index.js'

import * as e1root from 'e1'

export { default as json } from './json-data.json' assert {type: 'json'}

const { e1 } = e1def

const { e1: e1x } = e1root

export { e1, e1x }

export { m1 } from 'm1'

export { m1 as m1x } from 'm1/index.js'

export { e2 } from 'e2'

export { e2 as es3 } from 'e2/index'

export { e2 as es4 } from 'e2/alias'

export { e2foo } from 'e2/foo'

export { e2bar } from 'e2/bar-bundle'

export * from './foo.js'

export * from './baz/index.js'

export * from './q/u/x/index.js'

export const foobaz = foo + 'baz'

export { foo as foo1 } from './foo.js'

export const foo2 = await import('./foo.js')

export { qux } from './qux.js/index.js'

export const dirname = __dirname

export const filename = __filename

export const rfoo = require('e1/a/b/c/index.js')

export * from './only-types.js'

console.log(foobaz)
"
`;

exports[`patches fix() patches ts sources as required by opts 2`] = `
"export * from './index.js'
export * as reexport from './index.js'
"
`;

exports[`patches fix() patches ts sources as required by opts 3`] = `"export * from '../index.js'"`;
